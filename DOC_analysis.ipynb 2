{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import pandas as pd\n",
    "\n",
    "directory = \"/Users/vincewu/Bees-Project\"\n",
    "log_folder = \"Raw data H1H2\"\n",
    "processed_folder = \"Type 3 (Fully Processed)\"\n",
    "tag_id_file = 'tagnumeros_09.2022.csv'\n",
    "\n",
    "# # Replace with file path\n",
    "# directory = '/Users/Me/Documents/Bee /Bee project new/Bee project from 09.2022/Python'\n",
    "# log_folder=\"Raw data H3H4\"\n",
    "# #create a folder called this in the directory\n",
    "# processed_folder='H3H4 Processed'\n",
    "# tag_id_file='tagnumeros_09.2022.csv'\n",
    "\n",
    "# List with all start time | all end times\n",
    "                    # All trips less than 1 minute | number of trips less than 1 minute\n",
    "                    # All trips 1-3 minutes | number of trips 1-3 minutes\n",
    "                    # All trips 3-6 minutes | number of trips 3-6 minutes\n",
    "                    # All trips more than 6 minutes | number of trips more than 6 minutes\n",
    "\n",
    "# headers=[\"UID\", \"Day\", \"Group\", \"Trip Duration\", \"Rest Duration\", \"Start Time\", \n",
    "# \"End Time\", \"Trip Start and End Times\", \"All Start Times\",  \"All End Times\", \"Sub 1 Minute\"]\n",
    "\n",
    "activity = [[dict() for days in range(31)] for months in range(12)]\n",
    "# latest could be December 31\n",
    "start_month=11\n",
    "start_day=30\n",
    "# earliest could be January 1\n",
    "end_month=0\n",
    "end_day=0\n",
    "# file_count = [[0 for days in range(31)] for months in range(12)]\n",
    "\n",
    "# for filename in os.listdir(directory+'/'+log_folder):\n",
    "#     if filename.endswith('.csv'):\n",
    "#         #print(filename)\n",
    "#         file_length = len(filename)\n",
    "#         if filename[file_length-6:file_length-5] == ' ':\n",
    "#             subtract = 16\n",
    "#         elif filename[file_length-8:file_length-4] == 'copy':\n",
    "#             subtract=19\n",
    "#         else:\n",
    "#             subtract = 14\n",
    "#         month = int(filename[file_length-(subtract+5):file_length-(subtract+3)])-1\n",
    "#         day = int(filename[file_length-(subtract+2):file_length-subtract])-1\n",
    "#         file_count[month][day]+=1\n",
    "\n",
    "def seconds_to_hours(original_num):\n",
    "    seconds=original_num*3600\n",
    "    hours = int(seconds/3600)\n",
    "    seconds -= hours*3600\n",
    "    minutes = int(seconds/60)\n",
    "    seconds -= minutes*60\n",
    "    seconds=int( seconds)\n",
    "\n",
    "    hours_str=str(hours)\n",
    "    if(len(hours_str)==1):\n",
    "        hours_str='0'+hours_str\n",
    "    minutes_str=str(minutes)\n",
    "    if(len(minutes_str)==1):\n",
    "        minutes_str='0'+minutes_str\n",
    "    seconds_str=str( seconds)\n",
    "    if(len(seconds_str)==1):\n",
    "        seconds_str='0'+seconds_str\n",
    "\n",
    "    return hours_str+\":\"+minutes_str+\":\"+seconds_str\n",
    "\n",
    "treatment_ids_csv = pd.read_csv(os.path.join(directory, tag_id_file), engine='python', header=None)\n",
    "treatment_ids={}\n",
    "for i in range(len(treatment_ids_csv[0])):\n",
    "    treatment_ids[treatment_ids_csv.loc[i][1]]=treatment_ids_csv.loc[i][0]\n",
    "\n",
    "for filename in os.listdir(directory+'/'+log_folder):\n",
    "    if filename.endswith('.csv'):\n",
    "        #print(filename)\n",
    "        pathname = os.path.join(directory, log_folder, filename)\n",
    "\n",
    "        file_length = len(filename)\n",
    "        if filename[file_length-6:file_length-5] == ' ':\n",
    "            subtract = 16\n",
    "        elif filename[file_length-8:file_length-4] == 'copy':\n",
    "            subtract=19\n",
    "        else:\n",
    "            subtract = 14\n",
    "        month = int(filename[file_length-(subtract+5):file_length-(subtract+3)])-1\n",
    "        day = int(filename[file_length-(subtract+2):file_length-subtract])-1\n",
    "\n",
    "        if month<start_month:\n",
    "            start_month=month\n",
    "            start_day=day\n",
    "        elif month==start_month and day<start_day:\n",
    "            start_day=day\n",
    "\n",
    "        if month>end_month:\n",
    "            end_month=month\n",
    "            end_day=day\n",
    "        elif month==end_month and day>end_day:\n",
    "            end_day=day\n",
    "\n",
    "        # file_count[month][day]-=1\n",
    "\n",
    "        try:\n",
    "            df = pd.read_csv(pathname, engine='python',\n",
    "                            sep=\"[;,. ]\", skiprows=24)\n",
    "        except pd.errors.EmptyDataError:\n",
    "            df = pd.DataFrame()\n",
    "            \n",
    "        if not df.empty:\n",
    "            df.dropna(axis=1, how='all', inplace=True)\n",
    "\n",
    "            temp_columns = df.columns.tolist()\n",
    "            df.loc[-1] = temp_columns\n",
    "            df.index = df.index+1\n",
    "            df = df.sort_index()\n",
    "\n",
    "            time_found=False\n",
    "            for i in range(len(temp_columns)):\n",
    "                column = temp_columns[i]\n",
    "                col_length = len(column)\n",
    "\n",
    "                #temp_length=len(column)\n",
    "                if column[2:3] == \":\" and not time_found:\n",
    "                    temp_columns[i] = \"Timestamp\"\n",
    "                    time_found=True\n",
    "                elif column[:4] == \"25SQ\":\n",
    "                    temp_columns[i] = \"UID\"\n",
    "                elif column == \"1\" or column == \"2\":\n",
    "                    temp_columns[i] = \"Ant. Number\"\n",
    "\n",
    "            df.columns = temp_columns\n",
    "\n",
    "            for column in df.columns:\n",
    "                if column != \"Timestamp\" and column != \"UID\" and column != \"Ant. Number\":\n",
    "                    del(df[column])\n",
    "            \n",
    "            ids = len(df[\"UID\"])\n",
    "            keys=set()\n",
    "            \n",
    "\n",
    "            for i in range(ids):\n",
    "                key = df[\"UID\"][i]\n",
    "                if not key in keys:\n",
    "                    keys.add(key)\n",
    "\n",
    "                    #day number\n",
    "                    # Group ID\n",
    "                    # List with durations of trips in sequential order | \n",
    "                    # List with durations of time between trips in sequential order | \n",
    "                    # Start time of first trip | end time of last trip\n",
    "                    # List with start and end times of all trips\n",
    "                    # List with all start time | all end times\n",
    "                    # All trips less than 1 minute | number of trips less than 1 minute\n",
    "                    # All trips 1-3 minutes | number of trips 1-3 minutes\n",
    "                    # All trips 3-6 minutes | number of trips 3-6 minutes\n",
    "                    # All trips more than 6 minutes | number of trips more than 6 minutes\n",
    "\n",
    "                    activity[month][day][key] = {\"Day\": 0, \"Date\": 0, \"Group\": \"x\", \n",
    "                    \"Trip Durations\": [], \"Trip Durations (Hours)\": [], \n",
    "                    \"Trip Amount\": 0, \"Trip Average Duration\": 0, \n",
    "                    \"Trip Average Duration (Hours)\": 0, \"Rest Durations\": [], \n",
    "                    \"Rest Durations (Hours)\": [], \"Rest Amount\": 0, \"Rest Average Duration\": 0, \n",
    "                    \"Rest Average Duration (Hours)\": 0, \"First Detection\": 0,\n",
    "                    \"First Detection (Hours)\": 0, \"Last Detection\": 0, \n",
    "                    \"Last Detection (Hours)\": 0, \"Trip Start and End Times\": [], \n",
    "                    \"Trip Start and End Times (Hours)\": [], \"All Start Times\": [],  \n",
    "                    \"All Start Times (Hours)\": [], \"All End Times\": [], \"All End Times (Hours)\": [], \n",
    "                    \"1 Minute or Less Trips\": [], \"1 Minute or Less Trips (Hours)\": [], \"1 Minute Amount\": 0, \n",
    "                    \"1 Minute Average Duration\": 0, \"1 Minute Average Duration (Hours)\": 0, \n",
    "                    \"1 Minute Rest Durations\": [],  \"1 Minute Rest Durations (Hours)\": [], \n",
    "                    \"1 Minute Rest Amount\": 0, \"1 Minute Rest Average Duration\": 0, \n",
    "                    \"1 Minute Rest Average Duration (Hours)\": 0, \"1-3 Minute Trips\": [], \n",
    "                    \"1-3 Minute Trips (Hours)\": [], \"1-3 Minute Amount\": 0, \"1-3 Minute Average Duration\": 0, \n",
    "                    \"1-3 Minute Average Duration (Hours)\": 0, \n",
    "                    \"1-3 Minute Rest Durations\": [],  \"1-3 Minute Rest Durations (Hours)\": [],\n",
    "                    \"1-3 Minute Rest Amount\": 0, \"1-3 Minute Rest Average Duration\": 0,\n",
    "                    \"1-3 Minute Rest Average Duration (Hours)\": 0,\n",
    "                    \"3-6 Minute Trips\": [], \"3-6 Minute Trips (Hours)\": [],\n",
    "                    \"3-6 Minute Amount\": 0, \"3-6 Minute Average Duration\": 0,\n",
    "                    \"3-6 Minute Average Duration (Hours)\": 0, \n",
    "                    \"3-6 Minute Rest Durations\": [],  \"3-6 Minute Rest Durations (Hours)\": [],\n",
    "                    \"3-6 Minute Rest Amount\": 0, \"3-6 Minute Rest Average Duration\": 0,\n",
    "                    \"3-6 Minute Rest Average Duration (Hours)\": 0, \"6 Minute or More Trips\": [],\n",
    "                    \"6 Minute or More Trips (Hours)\": [], \"6 Minute Amount\": 0, \n",
    "                    \"6 Minute Average Duration\": 0, \"6 Minute Average Duration (Hours)\": 0,\n",
    "                    \"6 Minute Rest Durations\": [],  \"6 Minute Rest Durations (Hours)\": [], \n",
    "                    \"6 Minute Rest Amount\": 0, \"6 Minute Rest Average Duration\": 0,\n",
    "                    \"6 Minute Rest Average Duration (Hours)\": 0}\n",
    "\n",
    "                    #activity[month][day][key]=[int(), \"x\", [], [], int(), int(), [], [], int(), [], int(), [], int(), [], int()]\n",
    "                    if key in treatment_ids:\n",
    "                        activity[month][day][key][\"Group\"]=treatment_ids[key]\n",
    "                    else:\n",
    "                        activity[month][day][key][\"Group\"]=\"No Group\"\n",
    "                    sames = []\n",
    "\n",
    "                    prev_time=-1\n",
    "                    add = 0.001\n",
    "                    for j in range(i, ids):\n",
    "                        if df[\"UID\"][j] == key:\n",
    "                            temp = df[\"Timestamp\"][j]\n",
    "                            #time_length=len(temp)\n",
    "                            hour = int(temp[:2])\n",
    "                            minute = int(temp[3:5])\n",
    "                            second = int(float(temp[6:]))\n",
    "                            # hour = int(temp[:time_length-6])\n",
    "                            # minute = int(temp[time_length-5:time_length-3])\n",
    "                            # second = int(float(temp[time_length-2:]))\n",
    "                            # time = hour*3600+minute*60+second\n",
    "                            time=hour+minute/60+second/3600\n",
    "                            #print(time)\n",
    "                            if time==prev_time:\n",
    "                                time+=add\n",
    "                                add+=0.00000001\n",
    "                            else:\n",
    "                                prev_time=time\n",
    "                                add = 0.00000001\n",
    "\n",
    "                            #print(temp, time, sep=\" \")\n",
    "\n",
    "                            sames.append([time, int(df[\"Ant. Number\"][j])])\n",
    "                       \n",
    "                    first_key = True\n",
    "\n",
    "                    sames.sort()     \n",
    "                    #print(sames)\n",
    "                    time_groups = []\n",
    "                    reader_groups=[]\n",
    "                    directions=[]\n",
    "\n",
    "                    index = 0\n",
    "                    secure_index=-1\n",
    "                    activity[month][day][key][\"First Detection\"] = seconds_to_hours(sames[0][0])\n",
    "                    activity[month][day][key][\"First Detection (Hours)\"] = sames[0][0]\n",
    "                    activity[month][day][key][\"Last Detection\"]=seconds_to_hours(sames[-1][0])\n",
    "                    activity[month][day][key][\"Last Detection (Hours)\"]=sames[-1][0]\n",
    "\n",
    "                    while index<len(sames):\n",
    "                        first_time=sames[index][0]\n",
    "                        time_groups.append([])\n",
    "                        reader_groups.append([])\n",
    "                        directions.append(\"Unknown\")\n",
    "                        time_groups[-1].append(sames[index][0])\n",
    "                        reader_groups[-1].append(sames[index][1])\n",
    "\n",
    "                        index+=1\n",
    "                        while index<len(sames):\n",
    "                            if sames[index][0]-15/3600>first_time:\n",
    "                                break\n",
    "                            time_groups[-1].append(sames[index][0])\n",
    "                            reader_groups[-1].append(sames[index][1])\n",
    "                            index+=1\n",
    "\n",
    "                        if len(reader_groups[-1])>=2:\n",
    "                            if reader_groups[-1][0]==1 and reader_groups[-1][-1]==2:\n",
    "                                directions[-1]=\"Arriving\"\n",
    "                            elif reader_groups[-1][0]==2 and reader_groups[-1][-1]==1:\n",
    "                                directions[-1]=\"Departing\"\n",
    "\n",
    "                            if secure_index==-1 and (directions[-1]==\"Arriving\" or directions[-1]==\"Departing\"):\n",
    "                                secure_index=len(directions)-1\n",
    "\n",
    "                    time_groups=[[float(i) for i in block] for block in time_groups]\n",
    "                    #print(time_groups)\n",
    "                    #found a secure arrival or departure\n",
    "                    if i!=-1:\n",
    "                        possible_directions=[directions[secure_index], \"x\"]\n",
    "                        if directions[secure_index]==\"Arriving\":\n",
    "                            possible_directions[1]=\"Departing\"\n",
    "                        else:\n",
    "                            possible_directions[1]=\"Arriving\"\n",
    "\n",
    "                        for i in range(len(directions)):\n",
    "                            if directions[i]==\"Unknown\":\n",
    "                                distance = abs(i-secure_index)%2\n",
    "                                directions[i]=possible_directions[distance]\n",
    "\n",
    "                    #if no secure arrival or departure, everything is unknown\n",
    "                    #didn't happen a single time in the sample\n",
    "                    \n",
    "                    prev_time=-1\n",
    "                    index=0\n",
    "                    while index<len(time_groups)-1 and directions[index]==\"Arriving\":\n",
    "                        index+=1\n",
    "                    # latest \"Departing\", earliest \"Arriving\"            \n",
    "                    while index<len(time_groups):\n",
    "                        while index<len(time_groups)-1 and directions[index+1]==\"Departing\":\n",
    "                            index+=1\n",
    "                        # ends on a series of \"Departing\"\n",
    "                        if index==len(time_groups)-1:\n",
    "                            break\n",
    "\n",
    "\n",
    "                        start_time=time_groups[index][0]\n",
    "                        #print(start_time)\n",
    "                        # first trip of the day for the bee\n",
    "                        # if prev_time==-1:\n",
    "                        #     activity[month][day][key][\"First Detection\"] = seconds_to_hours(start_time)\n",
    "                        #     activity[month][day][key][\"First Detection (Hours)\"] = start_time\n",
    "                        # else:\n",
    "                        #     activity[month][day][key][\"Rest Average Duration (Hours)\"]+=start_time-prev_time\n",
    "                        #     activity[month][day][key][\"Rest Amount\"]+=1\n",
    "                        #     activity[month][day][key][\"Rest Durations\"].append(seconds_to_hours((start_time-prev_time)))\n",
    "                        #     activity[month][day][key][\"Rest Durations (Hours)\"].append((start_time-prev_time))\n",
    "\n",
    "                        if prev_time!=-1:\n",
    "                            activity[month][day][key][\"Rest Average Duration (Hours)\"]+=start_time-prev_time\n",
    "                            activity[month][day][key][\"Rest Amount\"]+=1\n",
    "                            activity[month][day][key][\"Rest Durations\"].append(seconds_to_hours((start_time-prev_time)))\n",
    "                            activity[month][day][key][\"Rest Durations (Hours)\"].append((start_time-prev_time))\n",
    "\n",
    "                        activity[month][day][key][\"Trip Start and End Times\"].append([seconds_to_hours(start_time)])\n",
    "                        activity[month][day][key][\"Trip Start and End Times (Hours)\"].append([start_time])\n",
    "                        activity[month][day][key][\"All Start Times\"].append(seconds_to_hours(start_time))\n",
    "                        activity[month][day][key][\"All Start Times (Hours)\"].append(start_time)\n",
    "\n",
    "                        index+=1\n",
    "                        end_time = time_groups[index][0]\n",
    "                        activity[month][day][key][\"Trip Average Duration (Hours)\"] += end_time - \\\n",
    "                            start_time\n",
    "                        activity[month][day][key][\"Trip Amount\"]+=1\n",
    "                        activity[month][day][key][\"Trip Durations\"].append(seconds_to_hours(end_time-start_time))\n",
    "                        activity[month][day][key][\"Trip Durations (Hours)\"].append(end_time-start_time)\n",
    "\n",
    "                        # activity[month][day][key][\"Last Detection\"]=seconds_to_hours(end_time)\n",
    "                        # activity[month][day][key][\"Last Detection (Hours)\"]=end_time\n",
    "                        activity[month][day][key][\"All End Times\"].append(seconds_to_hours(end_time))\n",
    "                        activity[month][day][key][\"All End Times (Hours)\"].append(end_time)\n",
    "                        activity[month][day][key][\"Trip Start and End Times\"][-1].append(seconds_to_hours(end_time))\n",
    "                        activity[month][day][key][\"Trip Start and End Times (Hours)\"][-1].append(end_time)\n",
    "                        prev_time=end_time\n",
    "\n",
    "                        if end_time-start_time<=60/3600:\n",
    "                            if activity[month][day][key][\"1 Minute Amount\"]>=1:\n",
    "                                rest_duration=start_time-activity[month][day][key][\"1 Minute or Less Trips (Hours)\"][-1][1]\n",
    "                                activity[month][day][key][\"1 Minute Rest Durations\"].append(seconds_to_hours(rest_duration))\n",
    "                                activity[month][day][key][\"1 Minute Rest Durations (Hours)\"].append(rest_duration)\n",
    "                                activity[month][day][key][\"1 Minute Rest Amount\"]+=1\n",
    "                                activity[month][day][key][\"1 Minute Rest Average Duration (Hours)\"]+=rest_duration\n",
    "\n",
    "                            activity[month][day][key][\"1 Minute or Less Trips\"].append([seconds_to_hours(start_time), seconds_to_hours(end_time)])\n",
    "                            activity[month][day][key][\"1 Minute or Less Trips (Hours)\"].append([start_time, end_time])\n",
    "                            activity[month][day][key][\"1 Minute Amount\"]+=1\n",
    "                            activity[month][day][key][\"1 Minute Average Duration (Hours)\"]+=end_time-start_time\n",
    "                        elif end_time-start_time <= 180/3600:\n",
    "                            if activity[month][day][key][\"1-3 Minute Amount\"] >= 1:\n",
    "                                rest_duration = start_time-activity[month][day][key][\n",
    "                                    \"1-3 Minute Trips (Hours)\"][-1][1]\n",
    "                                activity[month][day][key][\"1-3 Minute Rest Durations\"].append(\n",
    "                                    seconds_to_hours(rest_duration))\n",
    "                                activity[month][day][key][\"1-3 Minute Rest Durations (Hours)\"].append(\n",
    "                                    rest_duration)\n",
    "                                activity[month][day][key][\"1-3 Minute Rest Amount\"] += 1\n",
    "                                activity[month][day][key][\"1-3 Minute Rest Average Duration (Hours)\"] += rest_duration\n",
    "                            activity[month][day][key][\"1-3 Minute Trips\"].append([seconds_to_hours(start_time), seconds_to_hours(end_time)])\n",
    "                            activity[month][day][key][\"1-3 Minute Trips (Hours)\"].append([start_time, end_time])\n",
    "                            activity[month][day][key][\"1-3 Minute Amount\"]+=1\n",
    "                            activity[month][day][key][\"1-3 Minute Average Duration (Hours)\"]+=end_time-start_time\n",
    "                        elif end_time-start_time <= 360/3600:\n",
    "                            if activity[month][day][key][\"3-6 Minute Amount\"]>=1:\n",
    "                                rest_duration=start_time-activity[month][day][key][\"3-6 Minute Trips (Hours)\"][-1][1]\n",
    "                                activity[month][day][key][\"3-6 Minute Rest Durations\"].append(seconds_to_hours(rest_duration))\n",
    "                                activity[month][day][key][\"3-6 Minute Rest Durations (Hours)\"].append(rest_duration)\n",
    "                                activity[month][day][key][\"3-6 Minute Rest Amount\"]+=1\n",
    "                                activity[month][day][key][\"3-6 Minute Rest Average Duration (Hours)\"] += rest_duration\n",
    "                            activity[month][day][key][\"3-6 Minute Trips\"].append([seconds_to_hours(start_time), seconds_to_hours(end_time)])\n",
    "                            activity[month][day][key][\"3-6 Minute Trips (Hours)\"].append([start_time, end_time])\n",
    "                            activity[month][day][key][\"3-6 Minute Amount\"]+=1\n",
    "                            activity[month][day][key][\"3-6 Minute Average Duration (Hours)\"]+=end_time-start_time\n",
    "                        else:\n",
    "                            if activity[month][day][key][\"6 Minute Amount\"]>=1:\n",
    "                                rest_duration=start_time-activity[month][day][key][\"6 Minute or More Trips (Hours)\"][-1][1]\n",
    "                                activity[month][day][key][\"6 Minute Rest Durations\"].append(seconds_to_hours(rest_duration))\n",
    "                                activity[month][day][key][\"6 Minute Rest Durations (Hours)\"].append(rest_duration)\n",
    "                                activity[month][day][key][\"6 Minute Rest Amount\"]+=1\n",
    "                                activity[month][day][key][\"6 Minute Rest Average Duration (Hours)\"]+=rest_duration\n",
    "                            activity[month][day][key][\"6 Minute or More Trips\"].append([seconds_to_hours(start_time), seconds_to_hours(end_time)])\n",
    "                            activity[month][day][key][\"6 Minute or More Trips (Hours)\"].append([start_time, end_time])\n",
    "                            activity[month][day][key][\"6 Minute Amount\"]+=1\n",
    "                            activity[month][day][key][\"6 Minute Average Duration (Hours)\"]+=end_time-start_time\n",
    "                            \n",
    "\n",
    "                        while index<len(time_groups)-1 and directions[index+1]==\"Arriving\":\n",
    "                            index+=1\n",
    "\n",
    "        # for key in activity[month][day]:\n",
    "        #     print(key, \": \", activity[month][day][key])\n",
    "\n",
    "        # if file_count[month][day]==0:\n",
    "                    activity[month][day][key][\"Rest Average Duration\"]=seconds_to_hours(activity[month][day][key][\"Rest Average Duration (Hours)\"])\n",
    "\n",
    "                    if activity[month][day][key][\"Trip Amount\"]>0:\n",
    "                        activity[month][day][key][\"Trip Average Duration (Hours)\"]/=activity[month][day][key][\"Trip Amount\"]\n",
    "                        activity[month][day][key][\"Trip Average Duration\"]=seconds_to_hours(activity[month][day][key][\"Trip Average Duration (Hours)\"])\n",
    "                    if activity[month][day][key][\"Rest Amount\"]>0:\n",
    "                        activity[month][day][key][\"Rest Average Duration (Hours)\"] /= activity[month][day][key][\"Rest Amount\"]\n",
    "                        activity[month][day][key][\"Rest Average Duration\"]=seconds_to_hours(activity[month][day][key][\"Rest Average Duration (Hours)\"])\n",
    "\n",
    "                    if activity[month][day][key][\"1 Minute Amount\"]>0:\n",
    "                        activity[month][day][key][\"1 Minute Average Duration (Hours)\"]/=activity[month][day][key][\"1 Minute Amount\"]\n",
    "                        activity[month][day][key][\"1 Minute Average Duration\"]=seconds_to_hours(activity[month][day][key][\"1 Minute Average Duration (Hours)\"])\n",
    "                    if activity[month][day][key][\"1 Minute Rest Amount\"]>0:\n",
    "                        activity[month][day][key][\"1 Minute Rest Average Duration (Hours)\"] /= activity[month][day][key][\"1 Minute Rest Amount\"]\n",
    "                        activity[month][day][key][\"1 Minute Rest Average Duration\"] = seconds_to_hours(activity[month][day][key][\"1 Minute Rest Average Duration (Hours)\"])\n",
    "\n",
    "                    if activity[month][day][key][\"1-3 Minute Amount\"]>0:\n",
    "                        activity[month][day][key][\"1-3 Minute Average Duration (Hours)\"]/=activity[month][day][key][\"1-3 Minute Amount\"]\n",
    "                        activity[month][day][key][\"1-3 Minute Average Duration\"]=seconds_to_hours(activity[month][day][key][\"1-3 Minute Average Duration (Hours)\"])\n",
    "                    if activity[month][day][key][\"1-3 Minute Rest Amount\"]>0:\n",
    "                        activity[month][day][key][\"1-3 Minute Rest Average Duration (Hours)\"] /= activity[\n",
    "                            month][day][key][\"1-3 Minute Rest Amount\"]\n",
    "                        activity[month][day][key][\"1-3 Minute Rest Average Duration\"] = seconds_to_hours(\n",
    "                            activity[month][day][key][\"1-3 Minute Rest Average Duration (Hours)\"])\n",
    "\n",
    "                    if activity[month][day][key][\"3-6 Minute Amount\"]>0:\n",
    "                        activity[month][day][key][\"3-6 Minute Average Duration (Hours)\"]/=activity[month][day][key][\"3-6 Minute Amount\"]\n",
    "                        activity[month][day][key][\"3-6 Minute Average Duration\"]=seconds_to_hours(activity[month][day][key][\"3-6 Minute Average Duration (Hours)\"])\n",
    "                    if activity[month][day][key][\"3-6 Minute Rest Amount\"]>0:\n",
    "                        activity[month][day][key][\"3-6 Minute Rest Average Duration (Hours)\"] /= activity[month][day][key][\"3-6 Minute Rest Amount\"]\n",
    "                        activity[month][day][key][\"3-6 Minute Rest Average Duration\"] = seconds_to_hours(\n",
    "                            activity[month][day][key][\"3-6 Minute Rest Average Duration (Hours)\"])\n",
    "\n",
    "                    if activity[month][day][key][\"6 Minute Amount\"]>0:\n",
    "                        activity[month][day][key][\"6 Minute Average Duration (Hours)\"]/=activity[month][day][key][\"6 Minute Amount\"]\n",
    "                        activity[month][day][key][\"6 Minute Average Duration\"] = seconds_to_hours(activity[month][day][key][\"6 Minute Average Duration (Hours)\"])\n",
    "                    if activity[month][day][key][\"6 Minute Rest Amount\"]>0:\n",
    "                        activity[month][day][key][\"6 Minute Rest Average Duration (Hours)\"] /= activity[month][day][key][\"6 Minute Rest Amount\"]\n",
    "                        activity[month][day][key][\"6 Minute Rest Average Duration\"] = seconds_to_hours(activity[month][day][key][\"6 Minute Rest Average Duration (Hours)\"])\n",
    "\n",
    "        # month_df = pd.DataFrame.from_dict(activity[month][day], orient=\"index\")\n",
    "        #print(month_df.columns)\n",
    "        # month_df.to_csv(directory+'/'+processed_folder+'/type3_'+str(month+1)+'_'+str(day+1)+\".csv\")\n",
    "        \n",
    "# months=[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\n",
    "#             \"August\",\"September\",\"October\",\"November\",\"December\"]\n",
    "months_num=[31,28,31,30,31,30,31,31,30,31,30,31]\n",
    "# for month in range (len(activity)):\n",
    "#     print(months[month])\n",
    "#     for day in range (months_num[month]):\n",
    "#         print(\"Day: \", day)\n",
    "#         print(activity[month][day])\n",
    "\n",
    "final_df=[]\n",
    "day=1\n",
    "for i in range(start_day, months_num[start_month]):\n",
    "    for key in activity[start_month][i]:\n",
    "        activity[start_month][i][key][\"Day\"]=day\n",
    "        activity[start_month][i][key][\"Date\"]=str(start_month+1)+'/'+str(i+1)\n",
    "        \n",
    "    final_df.append(pd.DataFrame.from_dict(activity[start_month][i], orient=\"index\"))\n",
    "    day+=1\n",
    "\n",
    "for i in range(start_month+1, end_month):\n",
    "    for j in range(months_num[i]):\n",
    "        for key in activity[i][j]:\n",
    "            activity[i][j][key][\"Day\"]=day\n",
    "            activity[i][j][key][\"Date\"]=str(i+1)+'/'+str(j+1)\n",
    "\n",
    "        final_df.append(pd.DataFrame.from_dict(activity[i][j], orient=\"index\"))\n",
    "        day+=1\n",
    "\n",
    "for i in range(end_day+1):\n",
    "    for key in activity[end_month][i]:\n",
    "        activity[end_month][i][key][\"Day\"]=day\n",
    "        activity[end_month][i][key][\"Date\"]=str(end_month+1)+'/'+str(i+1)\n",
    "        \n",
    "    final_df.append(pd.DataFrame.from_dict(\n",
    "        activity[end_month][i], orient=\"index\"))\n",
    "    day+=1\n",
    "\n",
    "# final_df\n",
    "\n",
    "column_headers = [\"Day\", \"Date\", \"Group\", \"Trip Durations\", \"Trip Durations (Hours)\",\n",
    "                  \"Trip Amount\", \"Trip Average Duration\",\n",
    "                  \"Trip Average Duration (Hours)\", \"Rest Durations\",\n",
    "                  \"Rest Durations (Hours)\", \"Rest Amount\", \"Rest Average Duration\",\n",
    "                  \"Rest Average Duration (Hours)\", \"First Detection\",\n",
    "                  \"First Detection (Hours)\", \"Last Detection\",\n",
    "                  \"Last Detection (Hours)\", \"Trip Start and End Times\",\n",
    "                  \"Trip Start and End Times (Hours)\", \"All Start Times\",\n",
    "                  \"All Start Times (Hours)\", \"All End Times\", \"All End Times (Hours)\",\n",
    "                  \"1 Minute or Less Trips\", \"1 Minute or Less Trips (Hours)\", \"1 Minute Amount\",\n",
    "                  \"1 Minute Average Duration\", \"1 Minute Average Duration (Hours)\",\n",
    "                  \"1 Minute Rest Durations\",  \"1 Minute Rest Durations (Hours)\",\n",
    "                  \"1 Minute Rest Amount\", \"1 Minute Rest Average Duration\",\n",
    "                  \"1 Minute Rest Average Duration (Hours)\", \"1-3 Minute Trips\",\n",
    "                  \"1-3 Minute Trips (Hours)\", \"1-3 Minute Amount\", \"1-3 Minute Average Duration\",\n",
    "                  \"1-3 Minute Average Duration (Hours)\",\n",
    "                  \"1-3 Minute Rest Durations\",  \"1-3 Minute Rest Durations (Hours)\",\n",
    "                  \"1-3 Minute Rest Amount\", \"1-3 Minute Rest Average Duration\",\n",
    "                  \"1-3 Minute Rest Average Duration (Hours)\",\n",
    "                  \"3-6 Minute Trips\", \"3-6 Minute Trips (Hours)\",\n",
    "                  \"3-6 Minute Amount\", \"3-6 Minute Average Duration\",\n",
    "                  \"3-6 Minute Average Duration (Hours)\", \"6 Minute or More Trips\",\n",
    "                  \"3-6 Minute Rest Durations\",  \"3-6 Minute Rest Durations (Hours)\",\n",
    "                  \"3-6 Minute Rest Amount\", \"3-6 Minute Rest Average Duration\",\n",
    "                  \"3-6 Minute Rest Average Duration (Hours)\",\n",
    "                  \"6 Minute or More Trips (Hours)\", \"6 Minute Amount\",\n",
    "                  \"6 Minute Average Duration\", \"6 Minute Average Duration (Hours)\",\n",
    "                  \"6 Minute Rest Durations\",  \"6 Minute Rest Durations (Hours)\",\n",
    "                  \"6 Minute Rest Amount\", \"6 Minute Rest Average Duration\", \n",
    "                  \"6 Minute Rest Average Duration (Hours)\"]\n",
    "# print(start_month, start_day, end_month, end_day, day, sep=\" \")\n",
    "\n",
    "final_df_csv=pd.concat(final_df)\n",
    "\n",
    "final_df_csv.to_csv(directory+'/'+processed_folder+'/processed.csv', header=column_headers)\n",
    "\n",
    "# List with durations of trips in sequential order |\n",
    "                    # List with durations of time between trips in sequential order |\n",
    "                    # Start time of first trip | end time of last trip\n",
    "                    # List with start and end times of all trips\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "Cannot index by location index with a non-integer key",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m/var/folders/fn/lc35hvw96c7b67lzrh57_1z00000gn/T/ipykernel_28800/2320450080.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mfinal_df_csv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'25SQCMICSBB860900B144'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   1072\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1073\u001b[0m             \u001b[0mmaybe_callable\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_if_callable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1074\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmaybe_callable\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1075\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1076\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_is_scalar_access\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_axis\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1621\u001b[0m             \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mitem_from_zerodim\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1622\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1623\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Cannot index by location index with a non-integer key\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1624\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1625\u001b[0m             \u001b[0;31m# validate the location\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mTypeError\u001b[0m: Cannot index by location index with a non-integer key"
     ]
    }
   ],
   "source": [
    "final_df_csv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.frame.DataFrame"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a=pd.DataFrame()\n",
    "type(a)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.9.7 ('base')",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "21581d6d3ae79c11599e3d24eb0208c5d094f55ad0f08513ff675c72b86db4d2"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
